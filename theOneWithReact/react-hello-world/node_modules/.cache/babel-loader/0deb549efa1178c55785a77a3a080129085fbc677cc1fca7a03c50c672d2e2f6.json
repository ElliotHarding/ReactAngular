{"ast":null,"code":"var _jsxFileName = \"/home/hello/Documents/Git/ReactAngular/theOneWithReact/react-hello-world/src/App.js\",\n  _s = $RefreshSig$();\nimport logo from './logo.svg';\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const items = [\"Apple\", \"Banana\", \"Orange\"];\n  const [message, setMessage] = useState('');\n  const [products, setProducts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    fetch('http://localhost:3000/Products') // Replace with your API port\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.text();\n    }).then(data => {\n      setApiMessage(\"Got data\" + data);\n      setLoading(false);\n    }).catch(err => {\n      setError(err);\n      setLoading(false);\n      setApiMessage(\"No Message\");\n    });\n  }, []);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }, this);\n  }\n  var theHelloWorld = \"hello-world!\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: theHelloWorld\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"API MESSAGE: \", apiMessage]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: items.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"p0wzG6usPqhJlWIZKpMYvs4sHMg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","items","message","setMessage","products","setProducts","loading","setLoading","error","setError","fetch","then","response","ok","Error","status","text","data","setApiMessage","catch","err","children","fileName","_jsxFileName","lineNumber","columnNumber","theHelloWorld","className","apiMessage","map","item","index","_c","$RefreshReg$"],"sources":["/home/hello/Documents/Git/ReactAngular/theOneWithReact/react-hello-world/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\n\nimport React, { useState, useEffect } from 'react';\n\nfunction App() {\n\n  const items = [\"Apple\", \"Banana\", \"Orange\"];\n  const [message, setMessage] = useState('');\n \n  const [products, setProducts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  \n  useEffect(() => {\n    fetch('http://localhost:3000/Products') // Replace with your API port\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return response.text();\n      })\n      .then((data) => {\n        setApiMessage(\"Got data\" + data);\n        setLoading(false);\n      })\n      .catch((err) => {\n        setError(err);\n        setLoading(false);\n        setApiMessage(\"No Message\");\n      });\n  }, []);    \n  \n  if(error)\n  {\n  \treturn <h1>{error.message}</h1>;\n  }\n  \n  var theHelloWorld = \"hello-world!\"\n  return (\n    <div className=\"App\">\n      <h1>{theHelloWorld}</h1>  \n       \n      <h1>API MESSAGE: {apiMessage}</h1>    \n     \n      <ul>\n\t\t  {items.map((item, index) => (\n\t\t    <li key={index}>{item}</li>\n\t\t  ))}\n    \t</ul>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,IAAI,MAAM,YAAY;AAC7B,OAAO,WAAW;AAElB,OAAOC,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEb,MAAMC,KAAK,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC;EAC3C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACdc,KAAK,CAAC,gCAAgC,CAAC,CAAC;IAAA,CACrCC,IAAI,CAAEC,QAAQ,IAAK;MAClB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBF,QAAQ,CAACG,MAAM,EAAE,CAAC;MAC3D;MACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,CACDL,IAAI,CAAEM,IAAI,IAAK;MACdC,aAAa,CAAC,UAAU,GAAGD,IAAI,CAAC;MAChCV,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC,CACDY,KAAK,CAAEC,GAAG,IAAK;MACdX,QAAQ,CAACW,GAAG,CAAC;MACbb,UAAU,CAAC,KAAK,CAAC;MACjBW,aAAa,CAAC,YAAY,CAAC;IAC7B,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,IAAGV,KAAK,EACR;IACC,oBAAOV,OAAA;MAAAuB,QAAA,EAAKb,KAAK,CAACN;IAAO;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAChC;EAEA,IAAIC,aAAa,GAAG,cAAc;EAClC,oBACE5B,OAAA;IAAK6B,SAAS,EAAC,KAAK;IAAAN,QAAA,gBAClBvB,OAAA;MAAAuB,QAAA,EAAKK;IAAa;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAExB3B,OAAA;MAAAuB,QAAA,GAAI,eAAa,EAACO,UAAU;IAAA;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAElC3B,OAAA;MAAAuB,QAAA,EACDpB,KAAK,CAAC4B,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACrBjC,OAAA;QAAAuB,QAAA,EAAiBS;MAAI,GAAZC,KAAK;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAC3B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEV;AAACzB,EAAA,CA/CQD,GAAG;AAAAiC,EAAA,GAAHjC,GAAG;AAiDZ,eAAeA,GAAG;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}